<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\OpenAiPromptModel
 *
 * @property int $id
 * @property int|null $cate_id
 * @property string|null $title
 * @property string|null $icon
 * @property string|null $api
 * @property string|null $route
 * @property string|null $tips
 * @property string|null $prompt
 * @property string|null $template
 * @property string|null $options
 * @property int $enable
 * @property int $max_tokens
 * @property-read \App\Models\OpenAiPromptCategory|null $category
 * @method static Builder|OpenAiPromptModel newModelQuery()
 * @method static Builder|OpenAiPromptModel newQuery()
 * @method static Builder|OpenAiPromptModel query()
 * @method static Builder|OpenAiPromptModel whereApi($value)
 * @method static Builder|OpenAiPromptModel whereCateId($value)
 * @method static Builder|OpenAiPromptModel whereEnable($value)
 * @method static Builder|OpenAiPromptModel whereIcon($value)
 * @method static Builder|OpenAiPromptModel whereId($value)
 * @method static Builder|OpenAiPromptModel whereMaxTokens($value)
 * @method static Builder|OpenAiPromptModel whereOptions($value)
 * @method static Builder|OpenAiPromptModel wherePrompt($value)
 * @method static Builder|OpenAiPromptModel whereRoute($value)
 * @method static Builder|OpenAiPromptModel whereTemplate($value)
 * @method static Builder|OpenAiPromptModel whereTips($value)
 * @method static Builder|OpenAiPromptModel whereTitle($value)
 * @mixin \Eloquent
 */
class OpenAiPromptModel extends Model
{
    protected $table = 'openai_prompt_model';
    protected $fillable = [
        'cate_id', 'title', 'icon', 'api', 'route',
        'tips', 'prompt', 'template', 'options', 'max_tokens'
    ];

    public $timestamps = false;

    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope('sort', function (Builder $builder) {
            return $builder->orderByDesc('id');
        });
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo|OpenAiPromptCategory
     */
    public function category()
    {
        return $this->belongsTo(OpenAiPromptCategory::class, 'cate_id', 'cate_id');
    }

    public function getIconAttribute($value)
    {
        return material_url($value);
    }
}
